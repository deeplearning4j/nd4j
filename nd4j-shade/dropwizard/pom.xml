<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>nd4j-shade</artifactId>
        <groupId>org.nd4j</groupId>
        <version>0.6.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>dropwizard</artifactId>

    <properties>
        <dropwizard.version>0.8.0</dropwizard.version>
    </properties>

    <build>
        <plugins>
            <!--
            Use Maven Shade plugin to add a shaded version of Dropwizard and its major dependencies, that can be imported by
            including this module (org.nd4j.dropwizard) as a dependency.
            The major dependenices (Jackson, Jersey, Jetty, Glassfish) are also shaded here, in addition to dropwizard
            These dependenices are renamed and prefixed by the package org.nd4j.shade
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <!-- Filter out the Java service provider info for the shaded dependencies.
                            This is necessary as ServiceResourceTransformer is partly broken with shading: https://issues.apache.org/jira/browse/MSHADE-182
                            Contents of the Java service loader files are renamed, but the filenames themselves are not.
                            Consequently, the service loader mechanism cannot function correctly with the shaded jars
                            This matters for shading Dropwizard and Jackson dependencies (both use service loader functionality)
                            This should be fixed as of Maven Shade Plugin v3.0, at which point this workaround can be removed
                            Workaround here has 2 steps:
                            1. Ensure the incorrect service files are not included
                            2. Manually include correctly-named versions for the shaded dependencies, under the dir
                            resources/META-INF/services/
                            -->
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/services/io.dropwizard.*</exclude>
                                        <exclude>META-INF/services/com.fasterxml.jackson.*</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>reference.conf</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer">
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"/>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>

                <configuration>
                    <!--
                    Important configuration options here:
                    createDependencyReducedPom: remove the shaded artifacts from the module dependencies. Without this, the
                                                original dependencies will be shaded, AND still included as transitive deps
                                                in the final POM. This is not what we want.
                    shadedArtifactAttached:     If true, the shaded artifact will be a separate JAR file for install, with
                                                the original un-shaded JAR being separate. With this being set to false,
                                                the original JAR will be modified, and no extra jar will be produced.
                    promoteTransitiveDependencies:  This will promote the transitive dependencies of the shaded dependencies
                                                to direct dependencies. Without this, we need to manually manage the transitive
                                                dependencies of the shaded artifacts.

                    Note that using <optional>true</optional> in the dependencies also allows the deps to be shaded (and
                    original dependencies to not be included), but does NOT work with promoteTransitiveDependencies
                    -->
                    <shadedArtifactAttached>false</shadedArtifactAttached>
                    <createDependencyReducedPom>true</createDependencyReducedPom>
                    <promoteTransitiveDependencies>true</promoteTransitiveDependencies>

                    <artifactSet>
                        <includes>
                            <include>io.dropwizard:*</include>
                            <include>io.dropwizard.*:*</include>
                            <include>com.fasterxml:*</include>
                            <include>com.fasterxml.jackson:*</include>
                            <include>com.fasterxml.jackson.*:*</include>
                            <include>com.sun.jersey:*</include>
                            <include>com.sun.jersey.*:*</include>
                            <include>org.eclipse.jetty:*</include>
                            <include>org.eclipse.jetty.*:*</include>
                            <!--<include>javax.*:*</include>-->
                            <include>com.google.*:*</include>
                            <include>com.google:*</include>
                            <include>com.codahale.*:*</include>   <!-- Additional dropwizard (metrics) deps with inconsistent package names-->
                        </includes>
                    </artifactSet>

                    <relocations>
                        <!-- Dropwizard -->
                        <relocation>
                            <pattern>io.dropwizard</pattern>
                            <shadedPattern>org.nd4j.shade.dropwizard</shadedPattern>
                        </relocation>

                        <!-- Jackson dependencies - shaded separately to main ND4J Jackson deps -->
                        <relocation>
                            <pattern>com.fasterxml.jackson</pattern>
                            <shadedPattern>org.nd4j.shade.dwjackson</shadedPattern>
                        </relocation>

                        <!-- Jersey -->
                        <relocation>
                            <pattern>com.sun.jersey</pattern>
                            <shadedPattern>org.nd4j.shade.jersey</shadedPattern>
                        </relocation>

                        <!-- Jetty (org.eclipse.jetty) -->
                        <relocation>
                            <pattern>org.eclipse.jetty</pattern>
                            <shadedPattern>org.nd4j.shade.eclipse.jetty</shadedPattern>
                        </relocation>

                        <!-- Guava dependencies -->
                        <relocation>
                            <pattern>com.google</pattern>
                            <shadedPattern>org.nd4j.shade.google</shadedPattern>
                        </relocation>
                    </relocations>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>

        <!-- ND4J API (provided scope) for NDArray Jackson serialization with dropwizard version of Jackson -->
        <dependency>
            <groupId>org.nd4j</groupId>
            <artifactId>nd4j-api</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-core</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>

        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-assets</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>

        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-client</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>

        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-forms</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>

        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-views-mustache</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>

        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-views-freemarker</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>
    </dependencies>

</project>